function BFS(start, end):
    create an empty queue and enqueue the start position
    create a set for visited nodes and add the start position
    create a map to track the path from each node to its predecessor

    while the queue is not empty:
        dequeue the current node from the queue
        if the current node is the end position:
            break
            
        for each valid move from the current node:
            if the move leads to a node not yet visited:
                enqueue the node
                add the node to the visited set
                set the predecessor of the node to be the current node

    if we found a path to the end position:
        create a list for the path
        set the current node to be the end position
        while the current node is not the start position:
            add the current node to the path
            set the current node to be the predecessor of the current node
        add the start position to the path
        reverse the path
        return the path

    if we didn't find a path:
        return that no path exists
